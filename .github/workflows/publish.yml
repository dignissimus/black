name: Publish

on:
  push:
    branches: [main]
  release:
    types: [published]

jobs:
  pypi:
    name: PyPI (sdist + pure wheel)
    runs-on: ubuntu-latest
    if: github.event_name == 'release'

    steps:
      - uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v3

      - name: Install latest pip, build, twine
        run: |
          python -m pip install --upgrade --disable-pip-version-check pip
          python -m pip install --upgrade build twine

      - name: Build wheel and source distributions
        run: |
          python -m build

      - name: Upload to PyPI via Twine
        env:
          TWINE_PASSWORD: ${{ secrets.PYPI_TOKEN }}
        run: |
          twine upload --verbose -u '__token__' dist/*

  native-binaries:
    needs: [pypi]
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [windows-2019, ubuntu-20.04, macos-latest]
        include:
          - os: windows-2019
            pathsep: ";"
            asset_name: black_windows.exe
            executable_mime: "application/vnd.microsoft.portable-executable"
          - os: ubuntu-20.04
            pathsep: ":"
            asset_name: black_linux
            executable_mime: "application/x-executable"
          - os: macos-latest
            pathsep: ":"
            asset_name: black_macos
            executable_mime: "application/x-mach-binary"

    steps:
      - uses: actions/checkout@v3

      - name: Set up latest Python
        uses: actions/setup-python@v3
        with:
          python-version: "*"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip wheel setuptools
          python -m pip install .
          python -m pip install pyinstaller

      - name: Build binary
        run: |
          python -m PyInstaller -F --name ${{ matrix.asset_name }} --add-data 'src/blib2to3${{ matrix.pathsep }}blib2to3' src/black/__main__.py

      - name: Upload binary as release asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: dist/${{ matrix.asset_name }}
          asset_name: ${{ matrix.asset_name }}
          asset_content_type: ${{ matrix.executable_mime }}

  docker:
    if: github.repository == 'psf/black'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Check + set version tag
        run:
          echo "GIT_TAG=$(git describe --candidates=0 --tags 2> /dev/null || echo
          latest_non_release)" >> $GITHUB_ENV

      - name: Build and push
        uses: docker/build-push-action@v2
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: pyfound/black:latest,pyfound/black:${{ env.GIT_TAG }}

      - name: Build and push latest_release tag
        if: ${{ github.event_name == 'release' && github.event.action == 'published' }}
        uses: docker/build-push-action@v2
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: pyfound/black:latest_release
